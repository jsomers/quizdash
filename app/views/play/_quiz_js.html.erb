<script type="text/javascript">
	var QUIZ = {
		nick: "jsomers",
		id: null,
		focus: true,
		im_ready: false,
		mark_correct: function(q, ans) {
			var q = $(".repositories > li[qid=" + q + "]").addClass("correct");
	    	q.find("h3").html(ans).removeClass("hint");
	    	q.find("ul.repo-stats").effect("highlight", {color: "yellow"}, 500);
	    	q.effect("highlight", {color: "yellow"}, 500);
	    	q.find("img").show();
		}
	};

	$(document).ready(function() {		
		dash_hash = "<%= @hash %>";
		quiz_id = "<%= @quiz.id %>";
		time_limit = <%= @quiz.time_limit %>;
		
		answers = {};
		n_questions = 10;
		seen = {}; // TODO: This should probably be in QUIZ object, as should answers.
		
		jug = new Juggernaut;
		jug.on("connect", function() {
			$.get("/dashes/get/" + dash_hash + "?quiz_id=" + quiz_id,
				function(ret) {
					dash = JSON.parse(ret);
					//leaderboard.new(dash.board);
					
					if (Object.keys(answers).length == 0)
						populate_questions(dash.questions);

					QUIZ.nick = prompt("Enter your handle, please", "zero_cool");
					//CONFIG.nick = "player " + Math.floor(Math.random() * 101);
					var pointices = new_filled_array(n_questions, 0);
					var slot = [QUIZ.nick, pointices];

					$.post("/dashes/add_slot/", {dash_id: dash_hash, slot: JSON.stringify(slot)});
				}
			)

		});

		jug.subscribe("/" + dash_hash, function(ret) {
			data = JSON.parse(ret);
			if (data.board) {
				leaderboard.new(data.board, data.ready, typeof(data.started_at) != undefined);
			};
			
			if (data.msg) {
				switch (data.msg) {
					case "start_countdown":
						start_countdown();
						$(".bottom-bar span").remove();
						break;
					case "player_ready":
						readify(data.player_ready)
						break;
				}
			}
		})
		
		$("#answer").keyup(function() {
	    	var ans = $("#answer").val().toLowerCase();
			if (typeof(answers[ans]) != "undefined")
	    		var qid = answers[ans][0];
	    	if (typeof(qid) != "undefined" && typeof(seen[qid]) == "undefined") {
	    		QUIZ.mark_correct(qid, answers[ans][1]);
	    		$("#answer").val("");
	    		seen[qid] = true;
				var cur = leaderboard.current()[QUIZ.nick].pointices;
				if (cur.sum() == (cur.length - 1)) {
					$.post("/dashes/im_done", {dash_id: dash_hash, plyr: QUIZ.nick}, function(ret) {console.log(ret)});
					$(".start-button").html("Done!").show();
					$("#answer").attr("disabled", true);
				}
	    		$.post("/dashes/mark_q/",
	    		    {dash_id: dash_hash, quiz_id: quiz_id, qid: qid, plyr: QUIZ.nick},
	    		    function(ret) {
	                    console.log(ret);
	    		    }
	    		)
	    	};
	    });
	
		$(".start-button").click(function() {
			if (!QUIZ.im_ready) {
				QUIZ.im_ready = true;
				$(".start-button").css("background", "green");
				$(".start-button").css("font-weight", "normal");
				$(".start-button").css("text-shadow", "none");
				$(".start-button").css("cursor", "default");
				$(".start-button").html("Ready!");
				
				$.post("/dashes/activate_player",
					{dash_id: dash_hash, player: QUIZ.nick},
					function(ret) {
						console.log(ret);
					})
				};
			return false;
		})
	
		pad = function(n) {
			if (n < 10) {
				return "0" + n;
			} else { return "" + n };
		}
	
		pretty_time = function(m, s, i) {
			if (typeof i == "undefined") {
				return pad(m) + ":" + pad(s);
			} else { 
				return pad(m) + ":" + pad(s) + "." + i;
			};
		};
	
		tick = function(selector, m, s, i) {
			if (m == 0 && s == 0 && i == 0) {
				end_dash();
				return false;
			}
			if (typeof i == "undefined") {
				if (s == 0) {
					m -= 1;
					s = 59;
				} else {
					s -= 1;
				};
				if (m < 1) {
					var i = 9;
					setTimeout("tick(\"" + selector + "\", " + m + ", " + s + ", " + i + ")", 100);
				} else {
					setTimeout("tick(\"" + selector + "\", " + m + ", " + s + ", " + i + ")", 1000);
				}
			} else {
				if (i == 0 && s > 0) {
					s -= 1;
					i = 10;
				};
				if (i == 0 && s == 0) {
					m -= 1;
					s = 59;
					i = 10;
				}
				i -= 1;
				setTimeout("tick(\"" + selector + "\", " + m + ", " + s + ", " + i + ")", 100);
			};
			$(selector).html( pretty_time(m, s, i) );
		};
		
		start_dash_clock = function(minutes) {
			tick(".clock span", minutes, 0);
		};

		initiate_dash = function() {
			$.get("/dashes/start_countdown", {dash_id: dash_hash}, function(ret) { return false; });
		}
		
		end_countdown = function() {
			$("#countdown_container").hide();
			$("#overlay").hide();
			$("#answer").attr("disabled", false).focus();
			start_dash_clock(time_limit);
		}
		
		countdown = function(n) {
			$("#countdown_clock span").html(n);
			if (n > 0) { 
				setTimeout("countdown(" + (n - 1) + ")", 1000);
			} else {
				end_countdown();
			}
		}
		
		start_countdown = function() {
			$("#answer").attr("disabled", true);
			$("#quiz_description").hide();
			$(".news").css("position", "static");
			$(".news").css("opacity", 1);
			$("#your_repos").css("float", "right");
			$("li.diffstat").css("background", "none");
			$("li.diffstat.me").css("background", "#ffff99");
			$(".start-button").hide();
			var page_size = ___getPageSize();
			$("#overlay").css("width", page_size[0]).css("height", page_size[1]).show();
			$("#countdown_container").css("left", (page_size[0] / 2) - 100 + "px").show();
			countdown(9);
		};
		
		end_dash = function() {
			$("#answer").attr("disabled", true);
			var page_size = ___getPageSize();
			$("#overlay").css("width", page_size[0]).css("height", page_size[1]).show();
			$("#countdown_container").css("left", (page_size[0] / 2) - 100 + "px").show();
			var your_place = leaderboard.ordinal(leaderboard.current()[QUIZ.nick].place + 1);
			$("#countdown_clock span").html(your_place);
			$.post("/dashes/end_dash", {dash_id: dash_hash, quiz_id: quiz_id}, 
				function(ret) {
					console.log(ret);
				}
			)
		}
		
		readify = function(player) {
			$("li.diffstat").each(function(i, e) {
				if ($(e).find(".diffstat-summary").html() == player) {
					$(e).css("background", "#ddffdd");
				}
			})
		};
		
		make_answer_map = function(questions) {
			for (var i = 0; i < questions.length; i++) {
				var q = questions[i].question;
				for (j = 0; j < q.permissible_answers.length; j++) {
					var pa = q.permissible_answers[j];
					answers[pa.toLowerCase()] = [q.id, pa];
				}
			}
		}
		
		populate_questions = function(questions) {
			for (var i = 0; i < questions.length; i++) {
				var q = questions[i].question;
				var li = $("#question_template").clone();
				$(li).attr("id", null).attr("qid", q.id);
				$(li).addClass("simple");
				$(li).find("h3.hint").html(q.prompt);
				if (i < 5) {
					$(li).appendTo($("div.lefterly ul.repositories"));
				} else {
					$(li).appendTo($("div.righterly ul.repositories"));
				}
				$(li).show();
			};
			make_answer_map(questions);
		}
	});
	
	//if we can, notify the server that we're going away.
	$(window).unload(function () {
	  $.ajax({url: "/dashes/leave", data: {dash_id: dash_hash, handle: QUIZ.nick}, async: false});
	});
</script>